import torch

x = torch.empty(size=(3,3))
print(x)

"""
tensor([[0., 0., 0.],
        [0., 0., 0.],
        [0., 0., 0.]])
"""

x = torch.zeros(size=(3,3))
print(x)
"""
tensor([[0., 0., 0.],
        [0., 0., 0.],
        [0., 0., 0.]])
"""

x = torch.ones(size=(3,3))
print(x)
"""
tensor([[1., 1., 1.],
        [1., 1., 1.],
        [1., 1., 1.]])
"""

x = torch.rand(size=(3,4))
print(x)
"""
tensor([[0.0219, 0.7702, 0.9772, 0.0988],
        [0.5167, 0.1963, 0.2070, 0.2534],
        [0.9280, 0.2610, 0.6223, 0.0846]])
"""

# identity square matrix
x = torch.eye(4)
print(x)
"""
tensor([[1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.]])
        
"""


x = torch.arange(start=0, end=7, step=2)
print(x)
"""
tensor([0, 2, 4, 6])
"""


x = torch.linspace(start=0, end=1, steps=4)
print(x)
"""
tensor([0.0000, 0.3333, 0.6667, 1.0000])
"""


x = torch.linspace(start=0, end=7, steps=10)
print(x)
"""
tensor([0.0000, 0.7778, 1.5556, 2.3333, 3.1111, 3.8889, 4.6667, 5.4444, 6.2222,
        7.0000])
"""
x = torch.rand(size=(3,4)).normal_(mean=0, std=1)
print(x)


"""
tensor([[-2.5169,  1.7694,  1.0942, -0.1495],
        [ 1.1474,  1.2418, -0.1863, -0.6841],
        [ 0.5240, -0.2586, -2.3815, -0.5509]])
"""


x = torch.rand(size=(3,4)).normal_(mean=2, std=1.69)
print(x)

"""
tensor([[ 2.4454,  4.3459,  2.9982,  1.0560],
        [ 2.2156,  3.3102,  3.4266, -0.3894],
        [ 5.7077,  1.7045,  3.6859,  2.2392]])
"""



x = torch.rand(size=(3,4)).uniform_()
print(x)

"""
tensor([[0.3367, 0.4100, 0.5316, 0.6048],
        [0.0352, 0.8641, 0.2056, 0.8891],
        [0.7789, 0.3382, 0.1591, 0.4850]])
"""
# uniform distribution between 3 and 6
x = torch.rand(size=(3,4)).uniform_(3, 6)
print(x)

"""
tensor([[4.5831, 3.8190, 4.5003, 3.4958],
        [5.6872, 5.7687, 4.1394, 4.4049],
        [3.4706, 3.5765, 3.7374, 3.3751]])
"""
x = torch.diag(torch.ones(10))
print(x)

"""

tensor([[1., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 1., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 1., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 1., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 1., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 1.]])
"""


x = torch.diag(5*torch.ones(10))
print(x)


"""

tensor([[5., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 5., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 5., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 5., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 5., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 5., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 5., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 5., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 5., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 5.]])
"""